---
+++
@@ x,6 x,7 @@
 # ARG --enable=TRIO910,TRIO911

 from typing import Any
+import trio


 def bar() -> Any:
@@ x,30 x,38 @@

 async def foo1():  # TRIO910: 0, "exit", Statement("function definition", lineno)
     bar()
+    await trio.lowlevel.checkpoint()


 async def foo_return():
     bar()
+    await trio.lowlevel.checkpoint()
     return  # TRIO910: 4, "return", Statement("function definition", lineno-2)


 async def foo_yield():  # TRIO911: 0, "exit", Statement("yield", lineno+2)
     bar()
+    await trio.lowlevel.checkpoint()
     yield  # TRIO911: 4, "yield", Statement("function definition", lineno-2)
+    await trio.lowlevel.checkpoint()


 async def foo_if():
     if ...:
+        await trio.lowlevel.checkpoint()
         return  # TRIO910: 8, "return", Statement("function definition", lineno-2)
     elif ...:
+        await trio.lowlevel.checkpoint()
         return  # TRIO910: 8, "return", Statement("function definition", lineno-4)
     else:
+        await trio.lowlevel.checkpoint()
         return  # TRIO910: 8, "return", Statement("function definition", lineno-6)


 async def foo_while():
     await foo()
     while True:
+        await trio.lowlevel.checkpoint()
         yield  # TRIO911: 8, "yield", Statement("yield", lineno)


@@ x,8 x,10 @@
 async def foo_while4():
     while True:
         if ...:
+            await trio.lowlevel.checkpoint()
             yield  # TRIO911: 12, "yield", Statement("yield", lineno)  # TRIO911: 12, "yield", Statement("yield", lineno+2)  # TRIO911: 12, "yield", Statement("function definition", lineno-3)
         if ...:
+            await trio.lowlevel.checkpoint()
             yield  # TRIO911: 12, "yield", Statement("yield", lineno)  # TRIO911: 12, "yield", Statement("yield", lineno-2)  # TRIO911: 12, "yield", Statement("function definition", lineno-5) # TRIO911: 12, "yield", Statement("yield", lineno-2)
             # this warns about the yield on lineno-2 twice, since it can arrive here from it in two different ways

@@ x,15 x,19 @@
 # check state management of nested loops
 async def foo_nested_while():
     while True:
+        await trio.lowlevel.checkpoint()
         yield  # TRIO911: 8, "yield", Statement("function definition", lineno-2)
         while True:
+            await trio.lowlevel.checkpoint()
             yield  # TRIO911: 12, "yield", Statement("yield", lineno-2)
             while True:
+                await trio.lowlevel.checkpoint()
                 yield  # TRIO911: 16, "yield", Statement("yield", lineno-2)  # TRIO911: 16, "yield", Statement("yield", lineno)


 async def foo_while_nested_func():
     while True:
+        await trio.lowlevel.checkpoint()
         yield  # TRIO911: 8, "yield", Statement("function definition", lineno-2) # TRIO911: 8, "yield", Statement("yield", lineno)

         async def bar():
